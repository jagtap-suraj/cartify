import { Router } from "express";
import Joi from "joi";
import Product from "../models/product.js";
import sellerMiddleware from "../middlewares/sellerMiddleware.js";
const sellerRouter = Router();

// Define Joi validation schema for adding product
const addProductSchema = Joi.object({
  id: Joi.string().allow(null), // Allows id to be null
  name: Joi.string().required(),
  description: Joi.string().required(),
  quantity: Joi.number().required(),
  images: Joi.array().items(Joi.string()).required(),
  category: Joi.string().required(),
  price: Joi.number().required(),
  sellerId: Joi.string().required(),
});

// Add Product
sellerRouter.post("/seller/add-product", sellerMiddleware, async (req, res) => {
  // Validate request body against schema
  const { error } = addProductSchema.validate(req.body);
  if (error) {
    return res.status(422).json({ errors: error.details });
  }
  try {
    const { name, description, quantity, images, category, price, sellerId } =
      req.body;
    // The product is defined as let and not const because after saving it to the database,
    // we obtain the saved product with the unique id generated by MongoDB.
    let product = new Product({
      name,
      description,
      quantity,
      images,
      category,
      price,
      sellerId,
    });
    product = await product.save();
    res.json(product);
  } catch (e) {
    console.error(e);
    res.status(500).json({
      error: "An unexpected error occurred. Please try again later.",
    });
  }
});

// Define Joi validation schema for sellerId
const sellerIdSchema = Joi.object({
  sellerId: Joi.string().required(),
});

// Get all products of a specific seller with Joi validation for sellerId
sellerRouter.get("/seller/products", sellerMiddleware, async (req, res) => {
  // Validate sellerId from query
  const { error } = sellerIdSchema.validate(req.query);
  if (error) {
    return res.status(422).json({ errors: error.details });
  }

  const { sellerId } = req.query;
  try {
    const products = await Product.find({ sellerId: sellerId });
    res.json(products);
  } catch (e) {
    console.error(e);
    res.status(500).json({
      error: "An unexpected error occurred. Please try again later.",
    });
  }
});

export default sellerRouter;
